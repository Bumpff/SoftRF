SkyStrobe documentation
=======================

By Moshe Braner
This version last updated March 18, 2023
Corresponds to SkyStrobe version 03a.

*************
Note: Some GPIO pin assignments are different in this version 03x from versions 02x!
      In particular, the strobe control is now via pin 33.
*************


WHAT IS SKYSTROBE

Gliders (and other aircraft) can benefit from higher visibility to other aircraft.  That can be achieved using bright LEDs mounted under the canopy or elsewhere.  Due to the limited electrical power available, such strobes must be directional (usually facing forward), and turned on only a small percentage of the time.  SkyStrobe is firmware for a computerized control circuit for such an LED strobe.  It controls the flashing pattern.  It can increase the flashing frequency when information about nearby traffic, received via radio signals, warrants it.  It can also keep the strobe from flashing when the glider is on the ground.  A SkyStrobe device can work standalone, or can receive information via a cable or wirelessly.

In addition, since the Skystrobe device runs on the glider's 12V battery system, it can generate louder collision-warning beeps than a SoftRF device running on lower voltage.  The SkyStrobe firmware includes the capability to drive such added hardware, based on the signals it receives (via cable or wirelessly) from a SoftRF device, or a FLARM device.  Moreover, if connected to microswitches, it can also generate a sound alarm based on flexible logic, for example, if the spoilers are open with the gear still up.

Skystrobe can also serve as a data bridge.  Data arriving via a wireless connection is mirrored by SkyStrobe to its serial port.  This can be useful to feed data received wirelessly (e.g., from SoftRF), to a device that can process FLARM type input but only via a serial cable, such as a ClearNav, SN10, or XCvario.  Conversely, Skystrobe can mirror data arriving via serial cable (e.g., from FLARM) to WiFi or Bluetooth (e.g., to XCsoar).


ALTERNATIVES TO SKYSTROBE

My current version of SoftRF has strobe-control capability built-in.  One can connect the GPIO33 pin to a simple (non-computerized) strobe circuit.  See example circuit diagrams here: https://github.com/moshe-braner/SoftRF/tree/master/software/firmware/documentation/drivers.jpg.  But this approach cannot be used when the data source is a FLARM device rather than SoftRF, or when a wireless connection is preferred.


SKYSTROBE HARDWARE

The SkyStrobe software is available compiled for the ESP32 platform.  It only requires a simple ESP32 development board, without the radio devices (beyond the WiFi/Bluetooth capability of the ESP32 module itself).  There are many such boards available inexpensively.  Just make sure it includes 4+ MB flash memory.  In order to power the board from the glider's 12 volt system, a converter to 5 volts (USB power) is needed.  An easier approach is to use an ESP32 board that has such a converter built in, such as this one (which is made in the USA):
   https://www.ezsbc.com/product/wifi01-sw/
That board also has excess 5V output that can power a T-Beam (but don't charge your phone with it).  Current draw from a 13V source is about 50 mA.  See pinout diagram for use of this board with SkyStrobe here:
  https://github.com/moshe-braner/SoftRF/tree/master/software/firmware/documentation/EzSBC_ESP32_HV_wiring.jpg
Another possible model with 12V input is the "D1 R32" Arduino shield, but it is poorly documented:
   https://www.amazon.com/HiLetgo-ESP-32-Development-Bluetooth-Arduino/dp/B07WFZCBH8
   https://www.amazon.com/ACEIRMC-Wireless-Bluetooth-Development-Arduino/dp/B0B3WQPGRG
Or maybe use any generic ESP32 board, such as this compact one:
   https://www.amazon.com/Teyleten-Robot-ESP-WROOM-32-Bluetooth-Development/dp/B09C5RDZ8G
or this (same thing):
   https://www.amazon.com/HiLetgo-Development-ESP8285-Wireless-Internet/dp/B07BK435ZW
and add a tiny voltage converter like this to convert 12V to 5V:
   https://www.amazon.com/Regulator-Module-Voltage-Reducer-Adjustable/dp/B08R6337QY
(be sure to cut the "adjustable" trace correctly, see user comments there - then solder the 5V jumper).  See pinout diagram for use of this board with SkyStrobe here:  https://github.com/moshe-braner/SoftRF/tree/master/software/firmware/documentation/D1_Mini_ESP32_board_wiring.jpg
Although there is a 3.3V pin on this board, I have found that powering this board via that pin can cause damage.  So stick to powering it with 5V, via the "Vcc" pin (or the USB jack).

For the strobe part, an LED module is needed that can be driven in short pulses with a momentary power on the order of 10 watts (or more).  Red color is preferred.  I have used this module:
https://xpriteusa.com/collections/replacement-bulbs/products/xprite-g1-series-replacement-led-hide-a-way-lights?variant=37716161462431
It has 4 LEDs, each with a lens that focuses the light somewhat.  It has 2 parallel strings, each with 2 LEDs and a 5-ohm resistor in series.  At 0.5 amps, each LED shows a voltage of 2.6V, about 1 watt.  At 0.75 amps, each LED shows a voltage of 2.75V i.e. a momentary power of 2W.  I cut three traces in the middle of the circuit board and rewired it to make it 4 LEDs in series.  And moved one 5-ohm resistor to be in parallel with the other one.  The resulting circuit fits the available voltage better.  Given 13V power it self-limits to 0.75 amp.  Another option may be this module:
https://xpriteusa.com/collections/visor-dash-lights/products/xprite-undercover-series-led-strobe-lights-for-dash-windshield-with-suction-cups?variant=37716154744991
which has 8 LEDs in each half.  The reflector design offers a beam that is wider to the sides, but more focused vertically.  I have cut it in half width, and adapted the circuit in a similar way to the module mentioned above, but with two parallel circuits of 4 LEDs each, thus twice as bright.  But it is 1.7 inches high, may not fit in a given glider.  See photos of both modules, as modified, in this documentation folder.

To drive the LED module, using the output signal from pin 33 of the ESP32, some extra circuitry is needed.  At the least, a single transistor (of a type that can conduct more than an amp).  Since the signal current from the processor is limited to only about 10-20 mA, the gain of that transistor must be at least 50-100 to conduct an amp through the LEDs.  Use a high-gain transistor, or a Darlington type, or add another small transistor ahead of the power transistor.  A better approach is to use a power MOSFET instead.  Use an N-channel power MOSFET with low gate threshold, suggest the IRLZ34.  The 8-LED Xprite windshield half-board mentioned above has a low-side MOSFET already present that seems to function well enough with 3V input.  Or use a small NPN transistor to drive a P-channel power MOSFET such as the IRF9540.  See https://github.com/moshe-braner/SoftRF/tree/master/software/firmware/documentation/drivers.jpg for MOSFET circuit diagrams.  The top one is a bit simpler, but requires a MOSFET that goes into full conductance with a fairly low gate input voltage (under 3.3 volts from the ESP32), which is not the case for most.  The bottom one gives the MOSFET plenty of gate input voltage (I even included the 220 ohm resistor to cut it down from 12V to 8V), but requires a P-channel MOSFET (less commonly found in junk boxes).  It also allows keeping one side of the LED module grounded.

These circuits do not limit the current, only a small resistor in series with the LEDs (built into the module I use) limits the current.  As the battery slowly depletes and the supply voltage decreases, the current through the LEDs - and the brightness of the flashing - will decline somewhat.  This may be seen as a good thing, as it will extend the battery life somewhat.  If desired, a constant-current circuit can be used instead, see ______________.  But the LED module I used is self-limited by the LED voltage drop rising with the current, and the strobe pulses are short, thus no current limiting is needed.

For the sound alarms, I've used a small passive piezo beeper, of this type:
https://www.digikey.com/en/products/detail/murata-electronics/PKM22EPPH4001-B0/1219323
It will beep with useful volume if simply connected (in series with a 100-ohm resistor) between pins 14 and 15 of the processor.  For more volume, an amplifier circuit is needed.  A suitable amplifier can be built with 2 small transistors and a couple of resistors, see _____________.  Or, drive an external 12V *active* buzzer from pin 32 via a transistor.  That pin offers +3VDC during buzzing times.

For the connections between the ESP32 board and the LED & buzzer circuits, see the diagram here: __________.  Note: the pin numbers are a bit different from those used on the T-Beam with my version of SoftRF.  

For microswitches, connect "switch 1" between ground and pin 34, and "switch 2" between ground and pin 35.  Each of these pins, if used, should also be fitted with a pull-up resistor to the +3.3V line.


INSTALLING THE FIRMWARE FOR THE FIRST TIME

Since the generic ESP32 board will come with no (relevant) software installed, you will need to follow the "first time" firmware installation instructions in the SoftRF documentation file ____________ - but substitute the SkyStrobe binary file for the SoftRF one - find it here: _______________


SETTINGS

SkyStrobe has some settings that can be changed via a web browser in a similar way to SoftRF.  After startup, SkyStrobe creates its own Wifi network.  Use a computer, tablet, or smartphone to connect to that network.  Look for the network name SkyStrobe-xxxxxx where xxxxxx is the device id.  The password is 12345678.  Your phone or computer may complain that there is no internet access with this network (that is correct).  Then open a web browser and point it to the IP address 192.168.1.1.  It will connect to the mini web server built into SkyStrobe, allowing one to view SkyStrobe status info, change settings, or even update the firmware.

Click the "Settings" button at the lower left.  A new web page will load, where you can choose the settings.  Once you have selected the settings you want, scroll to the bottom of the web page and click "Save".  A new page will show the settings being saved and then the device will reboot.  Once it is done rebooting, re-connect to the SkyStrobe WiFi network, and go to the Settings page again, to check that your chosen settings are indeed in effect.

The settings you choose are stored inside the device, and are not erased even when upgrading to a new version of the firmware - as long as the stored settings are in a format compatible with the new firmware version.  If not, then the settings are reset to their defaults, and you need to set them again.

Here are the settings available in the current version:

* Strobe: the mode of operation can be "off", "alarm" (only flashes when the received data is signaling a collision danger), "airborne" (flashes periodically once airborne, and more often when signaled a collision danger - the default, and recommended), and "always" (even when not airborne).

* Sound: the beeps upon collision warnings, can turn on or off.  Default is on - but a sound will be heard only if a soundmaking device is connected.

* Connection type: whether via serial cable, WiFi or one of two types of Bluetooth.  If you are using SkyStrobe standalone, unconnected, choose "serial", which is also the default.

* Protocol: the data coming in from the connected device is usually in the NMEA format (default), but GDL90 is also theoretically supported (I have not tested it).

* Baud rate: this is only relevant to the serial connection method.  38400 is the default, as it is on SoftRF.

* Source Id: this is the network name (SSID), and password, if connecting via WiFi.  If using Bluetooth, this is the Bluetooth ID of the device sending the data - same as the SSID, in the case of SoftRF.  (You can leave the password in place when using Bluetooth.)

* Data bridge: wireless inputs always get mirrored to the serial output (as well as USB).  Serial input can be mirrored to a wireless output if called for in this setting.  Bridging between WiFi and Bluetooth is not possible, due to their sharing the same hardware in the ESP32.  Bridging between serial and Bluetooth is bidirectional.  Bridging between serial and UDP is one-way.  The difference between bridge settings "none" and "serial" is that with "none" some informational messages are sent to the serial and USB ports interleaved with the NMEA sentences.  With "serial" only NMEA sentences appear, although they include Skystrobe's special sentences announcing flashing of the strobe and the output of sound (buzzer) notifications.

* For the "gear warning" Switch 1 and Switch 2: each can be selected as absent, normally-open, or normally-closed.  And the logic of the warning can be AND (if both switches are NOT in their normal position then an alarm sounds), OR (either switch can trigger the alarm), or XOR - exclusive OR (alarm is triggered by either switch by itself, but not both at the same time).  An absent switch is considered to be a phantom switch in normal position, so choose "OR" logic to make one switch operate the alarm.  Leave each switch setting as "absent" unless a pull-up resistor is in place.

For example, ============================


UPDATING THE FIRMWARE

Future firmware updates are easier, you can use the WiFi method, via the web page mentioned above. See instructions in the SoftRF documentation file ____________ but substitute the SkyStrobe binary file for the SoftRF one - find it here: _______________


HOW TO CONNECT EXTERNAL DEVICES

At this point WiFi connection only offers the UDP protocol, not TCP, so set the other device accordingly.

If you prefer or need a Bluetooth connection, that is available.  But be aware that only a pair of devices can "pair".  I.e., the device sending the data to SkyStrobe cannot send the data to a third device (e.g., SkyView, or XCsoar) at the same time.  If you need to connect more than a pair of devices, use WiFi UDP.

For a cable connection, see the diagram here: __________.  Note: SkyStrobe expects serial data in the TTL voltage levels (0 and +3.3 V).  Do not connect "RS232" serial ports directly to it, as such a port swings between a negative voltage and 5V or higher.  If you need to receive data from a device with RS232 voltage levels, such as FLARM, a level-converter circuit is needed.  You can use a module based on the MAX232 chip, or the simple circuit shown here: ____________ - or even this simpler circuit if the serial port has internal pull-up: ____________.  If you need to send data in the other direction, from SkyStrobe to the other device which is expecting RS232 levels, a more complicated circuit may be needed, try this: __________, or even simply this: __________ - it may work - or use the max3232 type converter module.


OPERATION

SkyStrobe keeps trying to reconnect to its WiFi or Bluetooth partner until the other device is ready.

Regardless of the strobe operation mode selected (other than "off"), the strobe will operate for one minute after SkyStrobe power-on, alternating the "alarm" and non-alarm flashing patterns.  It also occasionally beeps for two minutes, to demo the collision alarm sound warnings.  And for a few early seconds it activates the gear-warning sound alarm.  All as a self-test, to verify the hardware is working.

After the self-test, if in "airborne" mode, SkyStrobe will try and detect whether the aircraft is airborne (based on GNSS sentences in the NMEA stream).  If a GNSS fix (from the connected device) is not available, SkyStrobe will assume the aircraft is airborne and will flash the strobe periodically (but not in the faster "alarm" pattern since the data is not available).  This is a "fail-safe" feature.

Alarm beeps will sound whenever another aircraft is first considered to pose a collision danger at one of the three "alarm levels" defined in the FLARM protocol: collision within 8 seconds (level 3), 9-12 seconds (level 2), or 13-19 seconds (level 1).  The warning beep will actually sound a second or two later than the time of that calculation.  After that, the same aircraft will not be warned about again, unless it either reaches a higher alarm level than was already warned, or the alarm level decreases first and then increases again.  The beeping pattern identifies the alarm level: a single beep for level 1, double beep for level 2, and 5 short beeps for level 3.  The pitch of the beep also increases with the level.


Extra features on the EZSBC ESP32 board

This board has two RGB LEDs.  One shows USB (but not UART) I/O in red and green.  The other one is programmable, and Skystrobe uses it as follows, for aid in troubleshooting:
* flash the LED red when giving a sound alarm, stay on for a while if WiFi connection failed
* flash the LED green to signal traffic data received or gear warning, blink while WiFi connecting
* flash the LED blue when driving the strobe, stay on for a while if WiFi successfully connected
Those are turned on by pulling *low* GPIO pins 16, 17, and 18, respectively.  So if using a different board, one can attach external LEDs for the same functionality.  Each should be connected to the +3.3V line via a 1K resistor.


For the geeks

Hopefully the low-level default settings, such as the duration of each flash (in milliseconds), are OK.  But yes it is possible to change them, via a Bluetooth terminal app.  Read through EEPROMHelper.cpp.


Future development

Coming next: voice traffic warnings in SkyStrobe, as has been done in my version of SoftRF.  That is, words such as "traffic, 8 o-clock, high", instead of just beeping.  To do that, need to add an audio amplifier that can drive a speaker.
