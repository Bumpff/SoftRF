Preliminary Documentation for Moshe Braner's version of SoftRF
==============================================================

By Moshe Braner

This version last updated November 9, 2022
to fit software version MB09b based on v1.0


PART 1: USER GUIDE - see separate document


PART 2: UNDER THE HOOD


DETAILS OF OPERATION

SoftRF is embedded software running in real time.  Multi-tasking is built into the hardware platform and utilized by some of the libraries.  The CPU multitasks, and also the other modules on the board operate on their own. For example, the radio module is set up to potentially receive a data packet, and the software checks later to see if such a packet has arrived.  Similarly, the serial communications hardware is periodically polled to see whether data has meanwhile arrived from the GNSS module.

The main line of SoftRF operates in a loop.  The order of the main ops in the normal() loop is:

  Baro_loop() - computes vertical speed if sensor available

  GNSS_loop() - gets a new GPS fix if available

  If a *new* GPS fix is not available, skip most of the following

  Compute timestamps

  Discretize GPS fixes into about 2-second intervals
        - for computation of turn rate, climb rate, etc

  Estimate_Climbrate() computes vertical speed using GPS data (if no baro)

  Estimate_Wind()
        - only recomputes if 666 ms since last time
        - calls project(ThisAircraft) to estimate future path
                 - project(ThisAircraft) only recomputes if 400 ms since last time

  RF_Transmit() - only actually transmits at some preset time intervals
        - calls protocol_encode()
             - but only if and when it is time to transmit
             - Legacy_encode() calls project(ThisAircraft)
                 - project(ThisAircraft) only recomputes if 400 ms since last time

  RF_Receive() - check for new received data, usually there is none

  If received new data by radio, call ParseData()
          - calls protocol_decode() on the received data packet
          - calls Traffic_Update() for the new or refreshed traffic
                 - which calls one of the collision alarm algorithms

  Traffic_loop() - check for collision dangers, at 2-sec intervals
          - calls Traffic_Update() for each known traffic
                   - unless already updated in last 2 seconds
               - which calls one of the collision alarm algorithms
                   - Alarm_Legacy() calls project(other_Aircraft)
          - calls Sound_Notify(max_alarm_level)

  Sound_loop()

  NMEA_Export()


DESCRIPTION OF THE MAJOR CHANGES MADE IN THIS VERSION

My source code modifications have touched about 50 source files.  Each of my git "commits" combines several unrelated modifications, and often the same issue is worked on further in subsequent commits.  To help one understand what I have changed, I've listed here the most important changes, their purpose, and which source files were most affected.  Each source file named should be understood to mean a pair of .cpp and .h files.

New files

I added a completely new and significant module in Wind.cpp.  It estimates the ambient wind whenever this aircraft is circling, based on both the downwind drift and the variation in ground speed around the circle.  It updates the wind estimate gradually, so as not to be influenced very much by noisy momentary fluctuations due to maneuvers by the pilot.  An estimate of the wind is needed because the assumption, when using the Legacy collision algorithm, is that the aircraft are flying perfect circles (constant bank angle) at a constant airspeed.  But actual trajectories are obtained via GNSS data which gives the path relative to the ground.  In the presence of wind that path is not a circle.  To convert from the ground path to the path relative to the air, or vice versa, the wind drift must be known.  Besides estimating the wind, this module also determines whether this aircraft is airborne, and includes code to project the future path of aircraft (both this aircraft and other aircraft), and to estimate the climb rate from GNSS data when a barometric sensor is not present.

Because the collision prediction algorithm for circling aircraft makes heavy use of some trig functions, in addition to their use in existing code, and because floating point ops on the ESP32 are fairly slow, I added a module called ApproxMath which implements very fast trig functions that are only as accurate as needed for the purpose.  The nwe functions atan2_approx() and approxHypotenuse() are set up in a way that also makes calling them more efficient.  E.g., no need to convert degrees to radians.  Also, in TrafficHelper Traffic_Update(), use a simple approximation for distance & bearing between 2 points, and compute and store some things (distance and bearing) in advance for re-use later.

Corrected determination of exact UTC time

Fixed a bug in the time computation.  Code now says "+ time_corr_neg".  Also handles possible small jitter in PPS.  The exact time is now computed in system/Time.cpp - Time_loop().  Changed globally to using the variable OurTime to hold the UTC second as determined from the GNSS.  That is to isolate it from any possible code I am or am not aware of that adjusts the "system" time.  E.g., the system clock gets updated by GNSSTimeSync() called from GNSS_loop().

Rewrote determination of time slots for frequency hopping

Wrote new code to compute the frequency hopping time slots for the "Legacy" (FLARM-compatible) protocol. (And also for OGNTP, which uses the same general scheme, but set up to use a different frequency than FLARM at any given moment.)  The original SoftRF code is buggy (and incomprehensible).  The second time slot, 800 to 1200 ms after the seconds tick, spans the next second tick (PPS).  The original SoftRF code switches to a new frequency at 1000 ms, due to passing the new Time (seconds UTC) to the frequency hashing function. T his is incorrect.  The full "Slot 1" should use the frequency based on the previous second's Time.  The new Time is adopted later, around 1300 ms, during the 200 ms dead time between Slot 1 and Slot 0.  The new code also computes the slot & channel once for the 400 ms duration of the Slot, for efficiency, instead of over and over in the general loop.  Variables keep track of when a new computation is later needed.  The random time to transmit within each time slot is also computed in advance at that time.  The time slots and channels for Legacy/OGNTP protocols are computed in driver/RF.cpp - RF_loop().  For other protocols (P3I, FANET, UAT) the original code is still in place.

Sound alarms

When a collision warning is given, at one of the three levels of urgency (following what FLARM does), besides sending the warning out as NMEA sentences, also use the piezo buzzer (if present) to produce beeps.  One beep for low level warning, two (at higher pitch) for medium level, and 5 beeps for urgent warnings.  Main files affected: driver/Sound, and platform/ESP32.

Take vertical separation into account

This is done both in alarm level calculations and in the purging of old traffic data in favor of new "closer" traffic.  The vertical separation (multiplied by a constant=5) is treated as additional distance to the traffic.  The relative vertical speed (only if converging in altitude) is also taken into account, as is the fact that GNSS-based altitude is not very accurate.  The goal is to avoid unnecessary collision warnings about traffic that is well separated by altitude, while not skipping any warnings about traffic that may not actually have true vertical separation.  Main file affected: TrafficHelper.

Hysteresis in collision alarms

When a collision warning is given about an aircraft in the vicinity, try not to repeat the warning too often.  E.g., when using the Distance method, the aircraft may move in and out of the threshold distance, triggering a new warning each time.  To avoid that, I added code to require a 2-step change in the alarm level for a given aircraft before the threshold for warnings is reset.  E.g., if alarm was given at LOW level, a new alarm alert will be issued only if the same aircraft gest close enough to now be considered URGENT.  I.e., the in-between IMPORTANT level is skipped.  But if the same aircraft then moves away to the CLOSE level (farther than LOW), the threshold is reduced, and the next time it reaches alarm level IMPORTANT a new alert will be triggered.  Main file affected: TrafficHelper - Traffic_Update() and Traffic_loop().

Graduated collision cone in Vector method

If the relative velocity vector is slightly outside the threshold chosen for triggering an alarm, still issue an alarm but at a lower urgency level.  Main file affected: TrafficHelper - Alarm_Vector().

New "Legacy" collision prediction method

This applies to circling aircraft.  This is complicated by the fact that FLARM sends out the projected future path in a format that - when there is wind - is neither relative to the air nor relative to the ground.  Main file affected: TrafficHelper - Alarm_Legacy().  Also modified outgoing Legacy radio packets (in protocol/Legacy legacy_encode()) to send path projection in the format FLARM expects.  Added code to compute path projections for ThisAircraft in two places: protocol/Legacy legacy_encode() and TrafficHelper - alarm_legacy().  Added code to compute projections for other Aircraft in TrafficHelper - alarm_legacy().  (These all end up calling the code in Wind.cpp.)

Modified the decision method for replacing old traffic data with new

Besides basing the decision on the distance modified to take altitude separation into account, also introduced the concept of an aircraft one wants to "follow", e.g., a "buddy".  The followed aircraft is tracked in preference over closer traffic, unless the closer traffic triggers a collision warning.  Also, remember some previous data from same aircraft, to help estimate the climb and turn rates.  Main file affected: TrafficHelper - ParseData().

Settable aircraft IDs

Added ability to ignore one aircraft ID - intended for self, from another device, or towplane.  Also added ability to set this aircraft ID (e.g., to ICAO), and always ignore incoming radio packets with same ID.  Also allow setting the "follow" ID.  Main files affected: TrafficHelper, protocol/radio/Legacy legacy_decode(), driver/EEPROM, ui/Web.

Modified computation of lat/lon in Legacy protocol

For more accuracy and efficiency.  Similar to, but not the same as, done in SoftRF main line recently.  Affected: protocol/radio/Legacy legacy_decode() and legacy_encode().

Additional settings

Added code to allow choosing aircraft ID type, aircraft IDs, baud rate, external power, my own debugging flags, etc.  Main files affected: driver/EEPROM, ui/Web.  Also added code into GNSS.cpp to allow accessing the added settings via $PSRFD NMEA sentences sent *to* SoftRF - useful for hardware (T-Echo) that does not offer the web UI.

Option to shutdown when there is no external power

Some have asked for an option to mount the SoftRF device in an inaccessible place in the cockpit, connected to external USB power. When they turn off the master power, or remove the glider battery, SoftRF will also turn off if the device has no battery. But a T-Beam that has had no power for a while takes a long time to re-acquire a GPS fix. So I've added an option (only "Prime Mark II" supported) to have a battery in the T-Beam, and have SoftRF turn itself off when (1) the battery voltage is below 3.9V, (2) the device has been operating for at least an hour, (3) external power has actually been removed, and, (4) the aircraft is not "airborne".  The idea is that after an hour with external power the battery voltage will be back to over 3.9V.  The "Power source" setting needs to be set to "External" for that.  Main file affected (besides those that adjust settings):  driver/Battery.

Spurious alarm warnings caused in FLARM by stationary SoftRF

Made multiple rounds of changes to the computation of the "airborne" status for this aircraft.  Now in Wind.cpp.  Set undocumented _unk2 bit in outgoing Legacy radio packets to 1 to mimic what FLARM does.  Affected: protocol/radio/Legacy legacy_encode().

Hide IGC encryption key

If compiled so as to enable the encryption in OGNTP, the key is divided into 4 sections, each is 8 hexadecimal digits.  (It's stored and used internally as 4 32-bit integers.)  For each section separately, if it's zero, it shows as "00000000", otherwise it shows as "88888888".  One can overwrite the "88888888" with something else (including "00000000") and it would then get saved.  If left as "88888888" then it is ignored and the current key is left intact.  This way a contestant can inspect or change other settings as needed, without losing the key, and without being able to see the key, that was earlier entered by a contest official.  And anybody can see whether a non-zero key has been set.  If set to all zeros then no encryption is done.

Support "Badge Edition" (T-Echo, nRF52840)

Incorporated mainline v1.2 EPD code.  Baro sensor probing hangs up the booting, even the BMP280, so removed all baro sensor access from the nRF52 version for now.  Created a new display screen that shows most of the settings.  Moved protocol & aircraft ID here from the status screen.  Replaced in the status screen with number of GNSS satellites and current collision alarm level.  Compiled two binaries, one with EU region as default and the other with US region.  All settings can be changed in either version.  Settings not changeable via the SoftRF Tool app can be changed via a USB connection and the "SoftRF settings tool 2.html" file.  The "SoftRF settings tool 1.html" offers the choice of "Legacy" alarm method, which is also now the default.  New file: Conf_EPD.cpp.


KNOWN ISSUES

Packets-transmitted count on OLED sometimes increments by dozens or hundreds at once.

Reception of FLARM signals can be further improved by shifting our clock (for frequency hopping) by about 50 ms.  Not clear why.

Baro sensor support and turn-off issues (both related to I2C library?) seem mostly resolved by switching from ESP32 Core library 2.0.2 to 2.0.3.  But inclusion of code for detection of baro sensors other than BMP280 still causes booting to fail.
