Preliminary Documentation for Moshe Braner's version of SoftRF
==============================================================

By Moshe Braner

This version last updated Sep. 23, 2023
to fit software version MB10e based on v1.0 with some parts of v1.2
The latest version of this document is always here:
 https://github.com/moshe-braner/SoftRF/blob/master/software/firmware/documentation


PART 1: USER GUIDE


WHAT IS SOFTRF

SoftRF is a do-it-yourself, multifunctional, compatible, radio-based proximity awareness system for general aviation.  SoftRF is free, open-source software that runs on inexpensive off-the-shelf hardware.  This software, when installed on suitable hardware and carried in an aircraft, transmits data on its position, and receives position data from other aircraft with compatible systems.  It can send information about nearby traffic, in standard formats, to visualization devices and to navigation software commonly used in sailplanes.  Several radio communications and local data exchange protocols are supported, but the one of interest to most glider pilots is the FLARM-compatible "Legacy" mode.  Both incoming and outgoing radio transmissions are fully interoperable with FLARM devices and with OGN ground stations.

Using SoftRF in your aircraft (when configured as "Legacy") will:
* make you visible to other FLARMs
* allow you to see other FLARMs
* make you visible to the OGN and viewable on websites like https://glidertracker.org/

Some people call this an "OGN tracker", although that label should be reserved for the devices used in some high level soaring competitions for the spectators' benefit.  SoftRF in "Legacy" mode is better described as a functional equivalent for FLARM.

What can SoftRF do that FLARM cannot?

On appropriate hardware, SoftRF can send traffic (and position) data out via WiFi or Bluetooth, which older FLARM models cannot do without additional hardware.  The new "Fusion" versions of FLARM do have wireless connectivity.  SoftRF can also operate using radio communications protocols other than the one used by FLARM, such as OGNTP, P3I or FANET.  But for the vast majority of glider pilots the FLARM protocol is the important one, as it simultaneously offers both bidirectional air-to-air traffic awareness for collision avoidance and the option to be tracked by OGN ground stations.  SoftRF can run all day on a small internal battery.

What can FLARM do that SoftRF cannot?

The more advanced PowerFLARM units can listen to FLARM signals via two antennas for more complete coverage.  Additionally, PowerFLARM can also receive ADS-B signals from aircraft that do not have FLARM, and even as re-broadcast from air traffic control ground stations.  This offers FLARM users awareness of some non-FLARM traffic, although the same is not true in reverse.  FLARM is also available off the shelf from an established company that offers services such as annual software updates.  But all this comes at a significant monetary price.

What can my version of SoftRF do that the mainline version cannot?

My version fixes some radio protocol bugs, making interoperability with FLARM more reliable.  My version correctly transmits the curved path of the aircraft (if circling) so that FLARM units receiving the data can predict collisions accordingly.  My version also receives and interprets the curved path of other aircraft as sent by FLARM units, and predicts collisions based on that.  And it does so even when the aircraft are subject to significant wind drift.  My version also offers built-in audible collision warnings in 3 levels of urgency, similar to what PowerFLARM Portable does.  My version also offers some conveniences, such as assigning the ID to this aircraft, and other IDs to ignore or to follow.

What can the mainline version of SoftRF do that my version cannot?

The main branch of SoftRF offers compiled binaries for a wide variety of hardware platforms.  My version has only been compiled for ESP32-based (T-Beam) and NRF52-based (T-Echo) hardware so far.  It can in theory be compiled for other hardware, but that is not a quick and easy thing to do.  I have concentrated on the "T-Beam" hardware because I believe it is the best choice at this time: is includes all the components one might want, integrated into a single board, including a holder for a 18650 size lithium cell, charger circuit, GNSS module, WiFi and Bluetooth capable CPU with nonvolatile flash memory, and an ISM-band radio.  The only thing missing is an SD card slot, which could have helped with software updates and also allowed operation as an (inofficial) flight recorder.


HISTORY

FLARM, the traffic awareness and collision avoidance system which has been adopted by most glider (and many other aircraft) pilots in Europe, operates in the 866-928 MHz range (depending on what is legal in each region of the world - 470 MHz in China).  It transmits in low power (20 milliwatts), in short bursts of a few milliseconds, once or twice per second.  It was developed before the latest developments in hardware integration and modulation schemes, and is oriented towards collision avoidance, not longe-range communications.

The Open Glider Network (OGN) has encouraged the establishment of many ground stations, mainly in Europe, that listen to signals from FLARM and other devices, and feed the data to servers on the internet.  Despite FLARM's low power, these stations can receive signals from tens of km away.

The "Internet of Things" (IoT) community has prompted manufacturers to develop inexpensive low-power hardware that integrates significant computing power and memory, along with communications capabilities including WiFi, Bluetooth, GNSS (such as GPS), and radios that operate in the unlicensed bands in the 400-1000 MHz range, in a variety of modulation schemes.

Linar Yusupov ( https://github.com/lyusupov/SoftRF ) developed SoftRF, which (among other things) sends, receives and interprets signals to and from aircraft in the same protocol as used by FLARM, or in some other protocols.  SoftRF runs on several types of the IoT hardware devices.

Moshe Braner ( https://github.com/moshe-braner/SoftRF ) further developed SoftRF, filling in some gaps as described above, thus making it a more complete functional equivalent to FLARM.  Ideally, these improvements would be incorporated into the main development branch of SoftRF.  But so far Linar Yusupov has not done that.  Thus to reap the benefits one must use this development fork.

The software is "embedded", i.e., runs on the bare hardware without an operating system, although it incorporates software libraries from the hardware manufacturers and from third parties.  The software is developed on other systems (e.g., Linux or Windows) and then copied ("flashed") into the flash memory of the IoT device, via a USB cable or Wifi.  The size of this compiled firmware is less than 2 megabytes.


HOW TO USE SOFTRF

See also Jim Hogue's detailed document:
https://github.com/moshe-braner/SoftRF/blob/master/documents/Guide_to_Building_SoftRF_and_SkyView-Jim_Hogue.pdf

Hardware choices

At this time my version of SoftRF runs specifically on certain devices with "system on a chip" CPU.  Namely the device from the LilyGo (TTGO) company they call the "T-Beam", and also on the "T-Echo" which is based on the nRF52840 CPU.  These are also called the "Prime Mark II" and "Badge" editions of SoftRF, respectively.

If you are buying a T-Beam or T-Echo, be sure to order the version that fits your regional radio frequencies.  I.e., in Europe the 868 MHz version, in the USA the 915 MHz version, etc.  I suspect the two mentioned are really the same board, but with possibly different antennas.  The 433/470 MHz board (for use in China) is definitely different!

I've bought T-Beam boards from LilyGo directly:
https://www.lilygo.cc/products/t-beam-v1-1-esp32-lora-module?variant=42204035186869
or from their "store" on Amazon or from banggood.com (they accept Paypal).

With my version of SoftRF you have the option of attaching a passive piezo buzzer (through a 100-ohm resistor) to the T-Beam, between GPIO pins 14 and 15, to get audible indications of collision warnings.  A suitable buzzer is this one:
https://www.digikey.com/en/products/detail/murata-electronics/PKM22EPPH4001-B0/1219323
The beeps are higher pitched, shorter, and more numerous for higher alarm levels.  If more than one aircraft is a collision danger, the beeps are split into double-beeps.  The two-pin push-pull arrangement yields louder beeping than connecting the buzzer between one pin and ground.  For even louder beeps, feed the pin 14 (and/or 15) signal to an external amplifier, or, select "external" in the buzzer volume setting to get +3v DC output signal on pin 14, and drive an external (12V) *active* buzzer via a transistor.  Be sure to *remove* the battery from the T-beam before soldering wires for the buzzer.  It is not enough to turn the T-Beam "off".  SoftRF also sends a special $PSRAA NMEA message whenever an audio alarm happens (or could happen).

This version of SoftRF, on the T-Beam, also has the ability to generate *voice* warnings about traffic that is in danger of collision.  For example, "traffic, 3 o'clock, low" for alarm levels 1 & 2, or "danger, ahead, level" for alarm level 3.  If more than one aircraft is a collision danger, the word "traffic" is appended at the end.  The audio data file needs to be uploaded via the web interface, see below.  The voice audio output is from pin 25.  This is a line-level output, it needs an external amplifier to drive a speaker.  See: https://github.com/moshe-braner/SoftRF/blob/master/software/firmware/documentation/audio_output_circuit_.jpg
for an example connection circuit.  The resistors reduce the output signal level to what the amplifier probably wants - if it is too weak, increase the value of the 2.2K resistors.  The 10 uF capacitor (positive side towards the T-Beam) blocks the DC component.  The 10 nF capacitor tries to filter out high frequencies, from the DAC steps and from the circuit board as a whole.  The amplifier can be a standalone device, or one can feed the signal into the AUX input of the aircraft communications radio, etc.  Another option is an external I2S decoder/amplifier, such as those based on the Max98357 chip.  The connection pins are: Serial Clock (SCK) (BCK): pin 14, Word Select (WS): pin 15, and Serial Data (SD): pin 25.  Note that while using an external I2S decoder, both the internal analog signal generator (output to pin 25), and the piezo buzzer option (on pins 14,15), are not available. This digital-output method has not been tested yet, let me know if it works!

You also have the option to attach (through a 100-ohm resistor) an LED, or LED-driving circuit, to pin 33 (note: moved from pin 25 to allow the voice output there).  This can be an LED on the T-Beam case, or elsewhere in the cockpit, that flashes in case of collision alarm.  Or, it can trigger a high-intensity strobe mounted in the front of the canopy, to visually warn pilots of other aircraft - with periodic flashes, and more frequent flashes in case of collision alarm.  For now, this needs a wired connection, specifically to a T-Beam.  SoftRF now also sends a special $PSRSF NMEA message whenever a flash happens (or could happen).  Utilizing that, can use a separate device ("SkyStrobe"), possibly embedded into the strobe unit, that receives data from SoftRF (or FLARM, wired or wirelessly), and controls the strobe based on that data.  See pinout diagram here:
  https://github.com/moshe-braner/SoftRF/blob/master/software/firmware/documentation/T-beam_wiring_.jpg

Often T-Beams are sold with a small "OLED" display that one needs to solder to the board using a 4-pin header (or is already soldered).  That is optional.  SoftRF will run just fine without the OLED display.  But if added, the OLED shows some information about SoftRF operation.  During booting, it shows the firmware version and the selected regional band.  Later it shows the device ID, the number of radio packets sent and received, the GNSS satellite reception status, battery voltage, IP address, and so forth.  Press the power-on button briefly to switch between 2 (or 3) pages of information.  This display is too small and dim to be useful during flight.  Be sure to *remove* the battery from the T-beam before soldering the OLED display to it.  It is not enough to turn the T-Beam "off".  See photo of the attached OLED:
  https://github.com/moshe-braner/SoftRF/tree/master/software/firmware/T-beam_OLED_attached.jpg

One needs to arrange a case for the T-Beam board.  I've hacked the plastic shell the board arrives in into a workable case.  If one uses the OLED display, note that it is very fragile, make sure the case protects it well.  It is easiest to use a 3D-printed case.  There are many designs available online as STL files for that purpose.  Some of these files make a case that is too small, hard to use, or won't fit a gopro mount.  One modified 3D model is available here:
https://drive.google.com/drive/folders/1hdEJ-nRVz4D_sYihwv1Re2S-p8_nsYaM?usp=sharing
which is a bit larger and has a gopro mount on the back of the enclosure. It connects with these or anything similar: https://www.amazon.com/GoPro-Grab-Bag-Official-Mount/dp/B01GCKO9IK
Or you can find a slightly deeper case here: https://www.dropbox.com/sh/iav5bai4vxluv5s/AADZT4aboAOxVr0VuBjDEtAAa?dl=0 that allows adding small items behind the board, e.g., a 12V to 5V converter, or a TTL to RS232 converter (or both!).  You don't have to have your own 3d printer.  You can order a case via treatstock.com - it allows you to upload the files, and have people with 3d printers make and ship them to you.  The black ABS material works better than PLA.  I'm told that the user OKSharPei 3D prints and ships very quickly.  But better yet cut out the middleman and go here: https://aero3ds.com/3d-printing - very reasonable prices especially if you buy several cases at once.

A better antenna than the tiny whip that is included with these boards may be helpful.  A true "dipole" antenna, which does not need a "ground plane" under the whip, should give better performance.  An antenna with a cable, mounted far forward (in the nose) or rearwards (in the wing spar area or rear fuselage) should work better than an antenna in the instrument panel area that is cluttered with wires and metal instruments.  Some dipole antennas have the cable exit the middle of the antenna on a right angle.  Others have the cable exit off one end.  Glue the antenna to a cockpit wall in as vertical an orientation as possible.

Even when using an antenna with a cable, the T-Beam needs to be mounted with its antenna connector on top, because there is a GNSS antenna attached to the board near there that needs to be horizontal and on top.  Unless one gets an external GNSS antenna with a longer cable, that is possible (via the UFL connector on the board), and can improve GNSS signal reception.  

Note: SoftRF will only transmit its location, interpret transmissions from other aircraft, and be visible on OGN, when a GNSS (GPS) fix has been acquired.  Note: this device may take as long as 30 minutes to find the first GPS fix.  The stock gps antenna is passive and poor, it will not work indoors and needs a clear outdoor area to work.  Some units seem better than others.  With an add-on active antenna the performance is much better.

The T-Echo offers a 1.5-inch e-paper display, which makes the device more self-contained.  But adjusting the settings on it is more difficult than on the T-Beam, because the T-Echo does not have WiFi connectivity.  It also transmits at lower power, and the stock antenna is nice-looking but has low performance.


How to power the SoftRF device

There are basically 3 options:

One can install an 18650 size cylindrical lithium-ion cell in the battery holder of the T-Beam (or a small Lithium-polymer pouch battery in the T-Echo), and run the device on that battery.  (Be sure to buy FLAT TOP and not BUTTON TOP 18650 batteries as only FLAT TOP will fit in the holder.)  This will suffice for long flights.  The battery can be charged via the USB port of the T-Beam or T-Echo.  When a charger is attached, the board turns on, one can then turn it off to make the charging process somewhat faster.  There is no indication on the T-Beam of when the charging is complete.  If your charger gets warm to the touch while charging, it will be cool to the touch when no longer charging at a significant rate.

Or, one can power the T-Beam via the USB port, without installing a battery on the board.  Any USB power source will do.  You may install a 12V to 5V dc-dc converter and use the aircraft main power so that SoftRF (plugged in via a USB cable) turns on when aircraft power is turned on.  The needed current is about 120 mA normally, perhaps double that during the very short transmission pulses (1 % of the time).  A disadvantage of this approach is that, after sitting unpowered for a while, the device may take a relatively long time to acquire a GNSS fix.  An advantage is that the device can be mounted "permanently" in the aircraft, one does not need to dismount it and take it elsewhere to charge it.

Or, a hybrid power system can be used, combining external USB power and an on-board battery.  That way the USB power charges the on-board battery while the device is in use.  If the external power fails the device will keep running on the battery.  If mounted in the aircraft in an inaccessible way, one can use the "external power" option in the settings (unique to my version of SoftRF) which will automatically turn the device off after several conditions are met: the device was running for at least an hour, the aircraft is not airborne, the external power has been turned off, and the battery voltage has decreased to under 3.9 volts.  But, if you store the device, with a lithium battery, in the glider trailer that gets hot in the summer sun, you may be nervous about the possibility of a fire.  Your choice.

After several weeks in the apparently "off" mode, the battery installed in a T-Beam may be depleted.  This seems to happen in some boards more than others.  Perhaps those with a barometric sensor added have a charge leak that causes that.  Always recharge the battery before attempting to use the device following a storage period of more than a couple of weeks.


Turning the device on and off

To turn on the T-Beam, press and hold the button closest to the USB jack for about 2 seconds.  Once LEDs and/or the OLED display light up, can let go of the button.  To turn off the T-Beam, press and hold the button closest to the USB jack until the dim red LED turns off - about 8 seconds.  The middle button does nothing (but see below), and the third button is a reset button.  After booting, the first button serves to switch between pages on the OLED display.

The Power Management Unit (PMU) on the T-Beam is always active.  The on/off button just sends instructions to the PMU.  The PMU can turn the power to individual parts of the board (e.g., the CPU, or the GNSS module) on or off.  There are 3 LEDs on the board.  The bright blue LED near the PMU is controlled by the PMU (with indirect instructions from the CPU).  The dim red LED near it signifies that the CPU is powered (I think).  The red LED near the GNSS module, when blinking, is indicating that the GNSS module has a "fix", i.e., is receiving signals from enough satellites.  If any of the 3 LEDs are lit, the board is not as close to "off" as it can be.

If a battery is installed on the board, the T-Beam is never completely turned "off".  Always remove the battery from the holder before soldering anything to the board.

The T-Echo has a Reset button and a Mode button.  Pressing the first, or pressing and holding the second, turns it on.  To turn it off, press and hold the Mode button.  Press the Mode button briefly to cycle through several screens.  Some of the screens only show "NO FIX" if a GNSS fix is not yet available.  The last screen (added in my version) shows most of the SoftRF settings - see below about changing the settings.  Find more info about operating the T-Echo ("Badge Edition") here:
https://github.com/lyusupov/SoftRF/wiki/Badge-Edition

FLARM does not generate collision warnings while it is not airborne.  My version of SoftRF follows that rule.  But to allow testing on the ground, my version does give such warnings - and sends signals out pretending to be airborne - for one minute after it is has booted and has acquired a GNSS fix.  If a strobe is connected, it too will fire during that minute, despite not being airborne.


Installing firmware for the first time

The T-Beam often arrives from the factory with some version of SoftRF already installed, currently mainline v1.1.  That allows installation of other versions of SoftRF via Wifi.  See the section below about firmware updates.

Note: if the board arrives with the "RC9" version of SoftRF, do not update the firmware via WiFi.  There is a bug in that version.  It will fail!  Use the USB method (this section) for the initial installation, of either my version of SoftRF, or version 1.0 (or higher) of the main line SoftRF.  After that, it will be possible to update the firmware to later versions via WiFi.

If the T-Beam board arrives with other software, e.g., "Meshtastic", or after a failed WiFi update, one may need to install SoftRF via the USB jack.  Follow the instructions here: https://github.com/lyusupov/SoftRF/blob/master/software/firmware/binaries/README.md#esp32 - substituting the  .bin file for the desired version of the software (e.g., from here: https://github.com/moshe-braner/SoftRF/tree/master/software/firmware/binaries/ESP32/SoftRF ) instead of the original SoftRF.ino.bin file.  A ZIP file with the other 3 small .bin files needed, and more detailed instructions, is available here: 
https://github.com/moshe-braner/SoftRF/tree/master/software/app/Flashing
You will need a PC running Windows, that can recognize the USB interface inside the T-Beam as a virtual serial port.  The copy of Windows 10 on my laptop did that as-is.  If it does not, you need to find and install "driver" software that fits the USB hardware inside the T-Beam.  Once the T-Beam shows up as a "COM port" (e.g., COM5) on the PC's device manager that hurdle is passed.  Then you need to download and run the software (mentioned in the instructions) from Expressif, the makers of the ESP32 chips.  It is not very intuitive to use, follow the written info, including the image: you must set the memory addresses as shown.  If it goes horribly wrong the T-Beam may appear dead (won't boot any more), but so far I've always managed to bring it back to life with repeated attempts with that utility software.

The T-Echo usually includes a "bootloader" which makes it easy to update the firmware.  See the "updating the firmware" section below.


The Web Interface (T-Beam only)

After startup, SoftRF on a T-Beam tries to connect to the WiFi network specified in the settings.  If not found (in 10 seconds), it creates its own Wifi network.  Use a computer, tablet, or smartphone to connect to the network.  If using an ambient network, connect to it as normal.  Otherwise, the network SoftRF creates is named SoftRF-xxxxxx where xxxxxx is the device id.  The password is 12345678.  Your phone or computer may complain that there is no internet access with this network (that is correct).  Then open a web browser and point it to the IP address 192.168.1.1 if using the network created by SoftRF.  If using an ambient network, check the third (or fourth) page on the OLED for the IP address - click the button to progress through the pages.  With the right IP address, the browser will connect to the mini web server built into SoftRF, allowing one to view SoftRF status info, change settings, or even update the firmware.  This feature is NOT available on the T-Echo.

Note that when Bluetooth is active, the WiFI connection is sluggish, and attempting to load the status web page may fail.  Try several times.  If you manage get through to that page, the settings and firmware update pages automatically turn Bluetooth off (until you reboot), to allow more reliable access to those functions.  If you cannot get to the status page, one way to recover is via a USB terminal and Settings2.html (see the next section).  Another way is to press the middle button, on a T-Beam v1.0, v1.1 or v1.2 - that turns Bluetooth off (until you reboot).  (The older T-Beam v0.7 does not have a "middle button".)  Wait until the T-Beam fully boots, then press the middle button, then try and access the web page.


Choosing the operational settings

Once the firmware is installed, before actual use in an aircraft, one must choose various options.  The default settings often don't quite do what you want.  The settings you choose are stored inside the device, and are not erased even when upgrading to a new version of the firmware - as long as the stored settings are in a format compatible with the firmware version.  If, for example, you upgrade from mainline v1.x to my version MB09x, since my version has additional settings, the stored settings are erased and all the settings are set to their defaults.  In that case you need to set them again.

On the T-Beam, connect to the SoftRF status web page as described above.  Then click the "Settings" button at the lower left.  A new web page will load, where you can choose the settings.  Once you have selected the settings you want, scroll to the bottom of the web page and click "Save".  A new page will show the saved settings (in a not-friendly format) and then the device will reboot.  Once it is done rebooting, re-connect to the SoftRF WiFi network, and go to the Settings page again, to check that your chosen settings are indeed in effect.

On the T-Echo, adjusting the settings is more difficult.  An Android app is available that can display and change the basic settings, see here: https://github.com/lyusupov/SoftRF/wiki/SoftRF-Configuration-Tool
But that tool does not offer the "Legacy" alarm trigger method.  And does not know about the additional settings in my version that are absent from the mainline version of SoftRF, e.g., setting the aircraft ID. A second method is to connect the T-Echo (or T-Beam, for that matter) via a USB cable to a computer with has a "terminal" program that can access the USB port as if it was a serial port.  Alternatively, use a Bluetooth terminal app.  In a web browser, open up one of the HTML files from this folder: https://github.com/moshe-braner/SoftRF/tree/master/software/app/Settings - the settings1 file for the basic settings, and the settings2 file for the additional settings.  In these open HTML pages, one can select the settings in the browser.  When done, be sure to click somewhere outside the input field last changed.  The cryptic $PSRF... line of text at the bottom will change.  Copy that line, and paste it into the terminal program so that it will be sent to the T-Echo.  This will cause the T-Echo to reboot with the new settings.

Because adjusting the settings on the T-Echo is more difficult, I've added a third method of adjusting some of the settings in the T-Echo, within the device, using the display & buttons.  See instructions later in this document in the "settings displayed, and adjusted, within the T-Echo" section.


Description of the settings:

Mode: normally select "Normal".

Device ID: this is unique to each device.  You cannot change it.

ICAO ID: you can enter any ID you want (6 HEX digits), but normally this would be the ICAO ID of your aircraft, which you can obtain from the authorities in your country.  In the USA go here: https://registry.faa.gov/aircraftinquiry/Search/NNumberInquiry and in the search results look for "Mode S Code (Base 16 / Hex)".  If you also have a transponder or some other device, setting all of them to the same ID will avoid duplicate reporting of the aircraft in OGN.

ID type to use: You can choose Random, ICAO (the ID entered above), Device (the fixed device ID), or Anonymous.  The latter is random but is fixed for the flight, while Random changes during the flight.  If you choose ICAO (best), or device ID, you can register your chosen ID on http://ddb.glidernet.org/ as your aircraft.  If you don't register it then only the cryptic ID will show up on OGN viewers such as https://glidertracker.org/ instead of your N number or tail number.

Aircraft ID to ignore: You can enter an aircraft (or device) ID that you do NOT want to include in traffic data (and collision warnings) reported by SoftRF.  E.g., if your towplane has FLARM and you tend to get unnecessary collision warning during the tow.  Leave as 000000 to not use this feature.  Note: signals from an aircraft ID identical to the ID of this one are always ignored, no need to enter that here.  E.g., if using two SoftRF and/or FLARM devices in the same aircraft, set both to the same ICAO ID - should probably also set Tx Power of one of them to "off" - and then SoftRF will ignore the other device.

Aircraft ID to follow: You can enter an aircraft (or device) ID to prioritize in traffic reports.  E.g., your flying buddy in another aircraft.  Leave as 000000 to not use this feature.  Normally SoftRF reports up to 8 aircraft, selecting the closest ones.  If an ID to follow is specified, it will be shown even if it is not one of the 8 closest.  A close-by aircraft that is a collision danger will always take priority though.

Protocol:  Choose "Legacy" for the FLARM radio protocol.  Legacy is visible to FLARMS, to SoftRF devices in Legacy mode, and to OGN stations. OGNTP is invisible to FLARMS but visible to OGN stations.  If you are using this device to see and be seen by other gliders using FLARM, change it to Legacy.  For towplanes: If the device is setting off collision alerts on tow, it can be configured to OGNTP, so that it does not alert FLARMs, but is still visible to OGN receivers on the ground for logging purposes.

Region: you must choose your geographical region, otherwise the radio will be on the wrong frequency and fail to communicate with the devices in other aircraft in your area.  E.g., choose EU (868 MHz) in Europe, and US (915 MHz) in the USA and Canada.

Aircraft type: E.g., glider, powered plane, etc.  This is important for collision avoidance and situational awareness, and also for OGN tracking.

Alarm trigger: this setting chooses an algorithm to base collision warnings on.  Recommended: "Legacy" (unique to my version), which mimics what FLARM does, predicting near-future paths of circling aircraft.  If neither aircraft is circling, this algorithm will automatically revert to the "Vector" method, which extrapolates straight lines.  And if movement is not determined, that (in my version) will revert to "Distance", which warns simply by the distance between the aircraft.  Thus, if you select "Legacy", then ALL the algorithms are used as appropriate.  If you select "None" then you will not get collision warnings.

Tx Power: transmitter power.  Normally use "Full" (which is less then a tenth of a watt).  Use "Low" (2 mw) for short-range testing, and "Off" if you want to see but not be seen - appropriate when running SoftRF on the ground just to see where other aircraft are.  If you are flying, and want to limit visibility to other aircraft while retaining collision avoidance, use "Stealth mode" instead - see below.

Volume: if a piezo buzzer is attached to the board for audible collision warnings, choose "Loud" here.  (It is not quite loud enough.)  If you get audible warnings via a connected device, e.g., XCsoar, then you can set the buzzer Volume to Low or Off.

Strobe mode: if an LED or strobe are connected to the T-Beam, this setting lets you choose one of 4 modes:
* Strobe off - never flashes
* Strobe alarm - flashes only when a collision alarm is given
* Strobe airborne - flashes whenever airborne, but more frequently if alarm given
* Strobe always - flashes even if not airborne.
The "alarm" and "airborne" modes also flash in the first 2 minutes after turning on the device, alternating between the alarm and non-alarm flash patterns, and occasionally beeping, as a self-test.

LED ring direction: this is for use only if you attach an LED traffic display such as "FLARMview".

Voice Warnings: Off, or Internal DAC (analog output via pin 25), or External I2S (pins 14, 15, 25).  Note that the external I2S option precludes use of a buzzer on pins 14 and 15.

Built-in Bluetooth: leave Off, unless you want to connect to an external device (e.g., XCsoar) via Bluetooth, then choose SPP (standard BT) or LE (low energy).

TCP mode (if used): Can choose Server (the default) which is what is expected by, e.g., XCsoar or Tophat (if TCP connection is used - the default is UDP), or Client which is needed to connect to XCvario.

Host IP (if TCP client): Enter IP address, e.g., 192.168.4.1 - only affects TCP client connection.

Host port (if TCP client): Choose the port to which the TCP client connects to, either 2000 (default) or 8880 (option for stock XCvario firmware).  The current version (MB09r or later) allows both TCP and UDP to be used at the same time (as primary and secondary NMEA data destinations).  The purpose is to connect wirelessly to XCvario (and XCsoar at the same time).

External WiFi (optional): after booting, SoftRF will try and connect to the specified WiFi network.  If not found, then after 10 seconds it will create its own WiFi network.  Either way, other devices can connect, to change settings or update the firmware.  In the case of an external network, the IP address can be seen in the third OLED screen.

NMEA output: this selects the method by which the data is sent out: Off (no data sent out), Serial (via the on-board serial interface, which also appears on the USB port), UDP (WiFi), TCP (another WiFi method), or Bluetooth.

NMEA sentences: Data is sent to connected devices via text "sentences" in the NMEA format.  You can turn on or off each of the following types of sentences:  GNSS (position data), Private (SoftRF debugging, leave off), 
Legacy (traffic data in the same format used by FLARM), Sensors (e.g., barometric sensor, if you attach such to the board), and Debug (debugging of my SoftRF version, leave off).

NMEA secondary output: two output routes are allowed simultaneously, e.g., Bluetooth and USB.  Or, UDP and TCP.

NMEA secondary output sentences: same choices as for the primary NMEA output.  E.g., can send GNSS data to the primary and traffic messages to the secondary.  By default both output get the same sentences: GNSS, traffic and sensors.

Serial Output Baud Rate: the default is 38400, you can choose some other speed if your connected device cannot use 38400.  E.g., the ILEC SN10 wants 19200.

GDL90: this is for a different (non-NMEA) local data transfer protocol, usually leave Off.

Dump1090: yet another local data transfer protocol, usually leave Off.

Power save: leaving the WiFi on shortens the battery runtime.  Select "WiFi OFF (10 min.)" to turn the WiFi off after allowing 10 minutes for connecting to change settings, etc.  Leave Power save "disabled" to keep the WiFi on - e.g., if you are sending data throughout the flight to a connected device via WiFi.

Shutdown if no external power: select "Yes" if you want automatic turn-off some time after external power is disconnected from a device that also has an internal battery - see "How to power the SoftRF device" section above.  If no internal battery is installed, can leave this setting as "No".

Air Relay: Optional relaying of radio packets from other aircraft by airborne aircraft.  The relaying is transparent, and happens no more than once every 5 seconds in total, and once every 15 seconds for any given landed aircraft.  Packets are relayed one hop and not relayed again.  Recommended setting: "Landed", meaning aircraft that landed out (or back home) will be "seen" from farther away (and perhaps by an OGN ground station) if airborne traffic with SoftRF is in the area to relay the data.  Another option is to relay all aircraft that are more than 10 km away or 1 km lower (or landed).  Airborne traffic is relayed in a way that makes it visible to SoftRF but invisible to FLARM (and visible to OGNbase but probably not standard OGN ground stations), since otherwise the originating FLARM "sees itself".

Stealth: if set to "On", your aircraft will not be shown on other aircraft' display, AND VICE VERSA (except at close range and in the case of collision danger).  This is opting out of long-range "FLARM RADAR" mutual visibility.

No track: this is similar to Stealth, but for the purpose of telling ground (OGN) stations to not report your position.

Radio CF correction: you can tell SoftRF (on some devices) to adjust the radio frequency up or down a bit.  Only use this if you have reliable information (e.g., from OGN ground stations) telling you that your device is a bit off-frequency.

Alarms Log: If enabled, every time a traffic alarm is issued (whether audible or not), a line of text is written into the alarmlog.txt file. This line includes the date, time, lat/lon, alarm level (1-3), aircraft ID, relative bearing, and horizontal and vertical separation (in meters).  If you want to download this data, use the web interface and click the "Alarm Log: [Download]" button at the bottom of the status page.  The existing file is normally appended to.  If space in the flash file system is low, the log file is erased and a new one created when SoftRF is first airborne following a power-up or reboot.  You can also do that manually by clicking the "Alarm Log: [Clear]" button on the status page.

IGC encryption key:  Only shown if SoftRF is set to use the OGNTP protocol. The key is divided into 4 sections, each is 8 hexadecimal digits.  For each section separately, if it's zero, it is shown as "00000000", otherwise as "88888888", masking the true key.  If left as "88888888" then the current key is left intact.  Overwrite with something else to change it.  If set to all zeros then no encryption is done.


The settings displayed, and adjusted, within the T-Echo

In the last display screen in the cycle of screens on the T-Echo, you will see something like this:

Normal  Glider  _      < normal mode, aircraft type glider, relay landed aircraft
US TX P:LEG A:LEG      < US region, full power, Legacy protocol, Legacy alarm method
Device: 60ABCD         < device ID (internal, cannot be changed)
Aircft: A23456 >>      < aircraft ID - and this is transmitted (">>")         
--A34567 ++A45678      < ignore ID and follow ID
NMEA1:BLT GL           < NMEA output to Bluetooth, sends GNSS & Legacy (traffic) data
NMEA2:USB SD           < NMEA output to USB, sends Sensors and Debug data

When you double-click the mode button the device normally toggles the display backlight on or off.  When this screen that shows various settings is displayed, if you double-click the mode button, it will instead go into change-settings mode.  It will show one setting at a time on a page, like this:
    Aircraft Type:
      Glider
Touching the "touch" button will change that setting, e.g., you will see:
    Aircraft Type:
      Towplane
A short-press of the mode button will switch to the next setting, e.g.:
    Frequency Band:
      EU
And so forth.  Note that after each "click" or "touch", it will take about 2 seconds for the next setting to appear on the screen - be patient.  There are three ways to exit the change-settings mode:
* single-click the mode button through all the settings until you see this:
    what to
    do next:
     cancel
  - use the touch button to select "cancel", "review", or "save" and then single-click the mode button.  Or:
* on any of these settings pages (no need to scroll through all the settings), double-click the mode button to save the new settings and reboot, or:
* press the reset button to reboot without changing the settings.
The settings accessible via this method are:
* AIRCRAFT TYPE:Glider, Towplane Helicopter, Powered, Hangglider, Paraglider, Dropplane, Parachute, Balloon, UAV, Static.
* RF PROTOCOL: LEGACY, OGNTP, P3I, FANET.
* RF BAND (REGION): EU, US, UK, AU, NZ, RU, CN, IN, IL, KR.
* Collision prediction algorithm: Legacy, Vector, Distance, None.
* Relay mode: None, Landed, All.
* Display units: Metric, Imperial, Mixed.
* Display orientation: Track Up, North Up.
Settings that require typing, such as the aircraft ID, are not adjustable this way, sorry.  Use a Bluetooth or USB terminal app and the HTML files mentioned above.


Uploading voice files (T-Beam only)

If the voice warnings are activated but audio data has not been uploaded, the warnings will say the single word "traffic".  To get the full voice messages, download the waves.tar file from this page:
  https://github.com/moshe-braner/SoftRF/tree/master/software/data/Audio
Then start up SoftRF, access the web interface, click the "upload" button at the bottom of the status web page, browse to the location where you saved the "waves.tar" file, and click "upload".  After that, it should say "17 WAV files found" at the bottom of the status page (refresh it).  The audio data (waves.tar) is stored in the file-system ("SPIFFS") area within the T-Beam's flash memory.  It is not erased when new firmware is uploaded.  If you need to erase it, use the "clear" button in the web interface.

If you want to create and upload customized audio files (e.g., in another language), use the supplied waves.tar file as a template.  17 files are needed, with the file names and meanings the same as in the supplied file.  The WAV files must be PCM, mono, 8-bit, with a sample rate of 8000 Hz.  I have used the free PC app "Wavosaur" to convert WAV files to this format.  The total size of the WAV files should be no more than about 150 KB.  Then use a file-compression utility (such as 7ZIP) to combine the 17 WAV files into one TAR file (not a ZIP file).  The order of the WAV files within the TAR file does not matter.  The name of the TAR file (unlike the WAV files within) does not matter, it will always be saved into SPIFFS as "waves.tar".


How to connect external devices

SoftRF can send data out to other devices, in several formats.  Most commonly, the format is NMEA sentences, which are lines of text that start with a code that identifies the type of data.  For example:
   $PFLAU,1,0,2,1,0,14,2,0,57,A8B031*7C
which happens to be a FLARM-like sentence describing a nearby aircraft.

The external device can be a dedicated display for traffic data, for example:
  https://github.com/lyusupov/SoftRF/wiki/SkyView-EZ
(and my github repository includes an improved version of the firmware for SkyView:
  https://github.com/moshe-braner/SoftRF/tree/master/software/firmware/binaries/ESP32/SkyView

Alternatively, the external device can be a glide computer, such as the ILEC SN10, or an e-reader, phone or tablet running the XCsoar or Tophat software.  In some cases such a device benefits from SoftRF also sending position (GNSS) data, e.g., XCsoar or Tophat on an e-reader which does not have GNSS hadrware.

The data can be sent out via a serial cable, a USB cable, WiFi (UDP or TCP), or Bluetooth (classic or LE).

The wireless methods (WiFi or Bluetooth) are convenient in that no cable is needed.  Only need to choose the relevant SoftRF settings as described above.  Instructions on how to connect to XCSoar (or Tophat) via UDP (WiFi) are here: https://github.com/lyusupov/SoftRF/wiki/Prime-Edition-MkII.-Quick-start - the result is that traffic becomes visible right on the moving map in XCsoar, the FLARM RADAR screen is available, and you can get spoken collision warnings such as "Traffic, 2 O'Clock, High".

The wired methods require additional hardware.  At the least, a USB cable.  For example, a PC can be connected via a USB cable and one can run terminal software on it (e.g., "Termite") that will display the data coming out of SoftRF.  That is useful for debugging.

But most external devices of interest do not have a USB interface that is capable of emulating a serial port.  Instead, one can use the serial port (UART) that is built into the T-Beam.  Two pins at the corner of the board are labeled TX (transmit data) and RX (receive data).  They need to be used in combination with one of the Ground pins to complete the circuit.  But, these pins operate at TTL voltage levels (0v and about +3V).  Many external devices are set up to use RS232 voltage levels, i.e., several volts negative and several volts positive.  To bridge such devices to the TTL UART, one needs to add a voltage-level conversion interface circuit, e.g., based on the MAX232 chip.  Such a chip can be powered from the 3.3V pins of the T-Beam.  This is not hard to do in principle, but there are some issues.  There may be little spare space inside the case holding the T-Beam.  And some of the cheap MAX232-like chips may be unstable and oscillate, resulting in excessive power draw from the board.  To protect the circuit, I suggest: (1) These conversion boards usually have two independent pairs of conversion circuits, thus one is used to connect to the T-Beam UART and one is not used.  Connect unused TTL _inputs_ of the MAX232 board to +3.3V (via a resistor, about 22Kohms), do not leave them open-circuit.  And: (2) connect the MAX232 board power input to the 3.3V source via a resistor (about 39 ohms) to limit the current in case it misbehaves.

Once connected, be sure to set the baud rate on the external device to match what SoftRF is using (38400 baud by default), or vice versa (my version of SoftRF allows you to choose the baud rate).

Note that due to the way the T-Beam is designed, the same data is sent out via both the USB interface and the UART pins.  They cannot be separated.

Connecting to XCvario

XCvario can be connected via a custom-built serial cable.  XCvario claims to work even at TTL levels, thus an RS232 level conversion chip is not required.

A wireless connection to XCvario is more difficult.  With the stock XCvario firmware (as of early 2023) and my version of SoftRF (MB09r or later) there is now a way to do it:  In SoftRF select WiFi client (SSID XCVario-XXXX, password xcvario-21), and TCP Client to IP address 192.168.4.1 and port 8880.  Activate TCP output as the primary NMEA output.  Also activate UDP output as the secondary NMEA output.  In XCvario make sure that "wireless" is WiFi (Master or Standalone, and not Bluetooth) and that the wireless data route is connected to "vario".  In XCsoar connect to the same XCvario WiFi network.  Configure two "devices" in XCsoar.  One a TCP client on port 8880, using XCvario protocol.  The other a UDP listener on port 10110, using FLARM protocol.  Magically, it works!  With custom firmware (and possibly a future official version) XCvario can also accept the data on port 2000, which frees port 8880 to serve other functions in XCvario.


Updating the firmware on the T-Beam

When it's time install a newer version of the SoftRF firmware on your T-Beam, the easiest way is to do it via WiFi, also called On The Air (OTA).

Note: if your T-Beam currently has the "RC9" version of SoftRF, do not update the firmware via WiFi.  It will fail!  There is a bug in that version.  Use the USB method (above) for the initial installation, of either my version of SoftRF, or version 1.0 (or higher) of the main line SoftRF.  After that, it will be possible to update the firmware to later versions via WiFi.

Here are step by step instructions for OTA firmware update:

* Download the .zip file with the most recent firmware.  My version is here:
  https://github.com/moshe-braner/SoftRF/tree/master/software/firmware/binaries/ESP32/SoftRF

* Unzip the firmware file, the actual firmware file has the suffix .bin and its size is about 1.7 megabytes.

* Fully charge the battery in your SoftRF device.

* Boot up SoftRF.

* Connect your PC/Tablet/Cellphone to the Wi-Fi Access Point created by SoftRF
    SSID: SoftRF-XXXXXX
    Key: 12345678
  (If SoftRF is already set up to connect as a client to an external WiFi network, and if this network is in range, you can skip this step, and have the PC/Tablet/Cellphone connected to the same external network.) 

* Open up a browser and proceed to the URL (IP address): 192.168.1.1
  (If using an external network, press the button for the third OLED screen to see the needed IP address.)

* Inspect the firmware version listed in the Status web page that opens up.

* Go to the Settings page by clicking the button at the bottom-left of the Status page.

* Write down your SoftRF settings, or take a screen shot of the SoftRF web-interface settings page from your browser.  Return to the status page.

* Click the "Firmware update" button in the SoftRF status web page.

* Click the "Choose file" button and select the .bin file with the new firmware.

* Click the "Update" button.

* Wait until the progress indicator reaches 100%, then wait some more...

ATTENTION! The update progress indicator shows file transfer completion only. So be patient and wait 30+ seconds more, do not touch anything or you may get a "bricked" device.

* When the update is completed the SoftRF device typically reboots automatically.  If it does not reboot itself, after a minute or two, press the reset (third) button on the T-Beam to force it to reboot.

* Re-connect to the SoftRF Wi-Fi Access Point and inspect the firmware version listed on the status page.  It should now show the new version.

* Check and restore your settings if necessary.  Depending on the old and new firmware versions, either all your settings will still be remembered, or all of them will need to be set again (where different from the defaults).

If this firmware update method fails (and it always fails if starting from the "rc9" firmware version), proceed to the first-time firmware installation procedure (via USB) mentioned above in this document.  That usually works, even if the T-Beam is unable to boot after a failed update.

See similar instructions with screen shots here: https://github.com/lyusupov/SoftRF/wiki/Firmware-update-%28Web-method%29#esp32


Updating the firmware on the T-Echo

The T-Echo usually includes a "bootloader" which makes it easy to update the firmware:
* Download an appropriate version of SoftRF firmware, from here:
https://github.com/moshe-braner/SoftRF/tree/master/software/firmware/binaries/nRF52840/SoftRF/MassStorage
* Unzip the file and make sure you now have a .uf2 file.
* Connect the SoftRF Badge Edition device to your PC by means of a USB cable (Type-A <-> Type-C)
* Double click (two clicks within 0.5 seconds) the RESET button on the T-Echo.
* A virtual disk with NRF52BOOT (or TECHOBOOT) label should appear in your "File manager".
* Drag the .uf2 firmware file by your pointing device (mouse, touchpad,...) and drop it into the window showing the NRF52BOOT (or TECHOBOOT) virtual disk.
* Wait until the file transfer is complete.  The window contents will disappear and the T-Echo will reboot itself.
Note that this "virtual disk" is not really a disk.  You will never see the dragged-and-dropped file stored on it.

See similar instructions here:
https://github.com/lyusupov/SoftRF/blob/master/software/firmware/binaries/README.md#nrf52840



PART 2: UNDER THE HOOD - see separate document

